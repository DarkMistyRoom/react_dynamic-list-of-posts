{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/Loader/Loader.tsx","components/PostDetails/PostDetails.tsx","api/posts.ts","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPostId","setSelectedPostId","className","map","post","userId","title","id","type","onClick","NaN","request","url","options","fetch","then","res","ok","Error","status","statusText","json","removeComment","commentId","method","addComment","data","headers","body","JSON","stringify","NewCommentForm","postId","changeCount","onAdd","useState","name","setName","email","setEmail","setText","onSubmit","e","preventDefault","placeholder","value","onChange","target","Loader","PostDetails","setPost","comments","setComments","isVisible","setIsVisible","setChangeCount","isLoading","setIsLoading","useEffect","length","comment","App","setPosts","selectedUser","setSelectedUser","hadleResponse","Number","isNaN","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e168bfa.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types/Post';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId: number,\n  setSelectedPostId: React.Dispatch<React.SetStateAction<number>>\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId,\n  setSelectedPostId,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts.map(post => (\n          <li key={`${post.id}`} className=\"PostsList__item\">\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            {post.id === selectedPostId ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => setSelectedPostId(NaN)}\n              >\n                Close\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => setSelectedPostId(post.id)}\n              >\n                Open\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { Data } from '../types/Data';\nimport { Options } from '../types/Options';\n\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nexport function request(url: string, options?: Options) {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n}\n\nexport function post(url: string, data: Data) {\n  return request(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  });\n}\n\nexport function remove(url: string) {\n  return request(url, { method: 'DELETE' });\n}\n","import { Data } from '../types/Data';\nimport { request, post, remove } from './api';\n\nexport function getPostComments(postId: number) {\n  return request(`/comments?postId=${postId}`);\n}\n\nexport function removeComment(commentId: number) {\n  return remove(`/comments/${commentId}`);\n}\n\nexport function addComment(data: Data) {\n  return post('/comments', data);\n}\n","import React, { useState } from 'react';\nimport { addComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number,\n  changeCount: number,\n  onAdd: React.Dispatch<React.SetStateAction<number>>,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  changeCount,\n  onAdd,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setText] = useState('');\n\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    addComment({\n      postId,\n      name,\n      email,\n      body,\n    }).then(() => onAdd(changeCount + 1));\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={onSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={e => setName(e.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={e => setEmail(e.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={e => setText(e.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getPostComments, removeComment } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedPostId: number\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isVisible, setIsVisible] = useState(true);\n  const [changeCount, setChangeCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPostDetails(selectedPostId).then(res => {\n      setPost(res);\n      setIsLoading(false);\n    });\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPostComments(selectedPostId).then(res => {\n      setComments(res);\n      setIsLoading(false);\n    });\n  }, [selectedPostId, changeCount]);\n\n  return (post && !isLoading ? (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\" data-cy=\"postList\">\n        {isVisible ? (\n          <>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setIsVisible(false)}\n            >\n              {`Hide ${comments.length} comments`}\n            </button>\n          </>\n        ) : (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setIsVisible(true)}\n          >\n            {`Show ${comments.length} comments`}\n          </button>\n        )}\n\n        <ul className=\"PostDetails__list\">\n          {isVisible && comments.map(comment => (\n            <li key={comment.id} className=\"PostDetails__list-item\">\n              <button\n                type=\"button\"\n                className=\"PostDetails__remove-button button\"\n                onClick={() => {\n                  removeComment(comment.id)\n                    .then(() => setChangeCount((changeCount + 1)));\n                }}\n              >\n                X\n              </button>\n              <p>{comment.name}</p>\n            </li>\n          ))}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={post.id}\n            changeCount={changeCount}\n            onAdd={setChangeCount}\n          />\n        </div>\n      </section>\n    </div>\n  ) : (\n    <Loader />\n  ));\n};\n","import { request } from './api';\n\nexport function getUserPosts(userId: string) {\n  return request(`/posts?userId=${userId}`);\n}\n\nexport function getAllPosts() {\n  return request('/posts');\n}\n\nexport function getPostDetails(postId: number) {\n  return request(`/posts/${postId}`);\n}\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Post } from './types/Post';\nimport { getUserPosts, getAllPosts } from './api/posts';\nimport { Loader } from './components/Loader';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState('0');\n  const [selectedPostId, setSelectedPostId] = useState(NaN);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const hadleResponse = (res: Post[]) => {\n    setPosts(res);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (selectedUser === '0') {\n      getAllPosts().then(hadleResponse);\n    } else {\n      getUserPosts(selectedUser).then(hadleResponse);\n    }\n  }, [selectedUser]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUser}\n            onChange={e => setSelectedUser(e.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <PostsList\n              posts={posts}\n              selectedPostId={selectedPostId}\n              setSelectedPostId={setSelectedPostId}\n            />\n          )}\n        </div>\n\n        {!Number.isNaN(selectedPostId) && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}